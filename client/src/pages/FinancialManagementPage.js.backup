import React, { useState, useEffect, useContext, useMemo, useCallback } from 'react';
import {
  Container,
  Paper,
  Typography,
  Box,
  Grid,
  TextField,
  Button,
  Card,
  CardContent,
  TableContainer,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  CircularProgress,
  Alert,
  Divider,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Stack,
  Tabs,
  Tab,
  Chip,
  Breadcrumbs,
  Link,
  IconButton,
  Tooltip,
  useTheme,
  alpha,
  styled,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  InputAdornment,
  FormHelperText
} from '@mui/material';
import {
  Add as AddIcon,
  Remove as RemoveIcon,
  TrendingUp as TrendingUpIcon,
  TrendingDown as TrendingDownIcon,
  AccountBalance as AccountBalanceIcon,
  DateRange as DateRangeIcon,
  Category as CategoryIcon,
  Description as DescriptionIcon,
  AttachMoney as AttachMoneyIcon,
  Receipt as ReceiptIcon,
  Payment as PaymentIcon,
  Save as SaveIcon,
  Cancel as CancelIcon,
  FilterList as FilterListIcon,
  Download as DownloadIcon,
  Print as PrintIcon,
  Refresh as RefreshIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  ChevronRight as ChevronRightIcon,
  ChevronLeft as ChevronLeftIcon,
  Settings as SettingsIcon,
  Restaurant as RestaurantIcon,
  LocalGroceryStore as GroceryIcon,
  DirectionsCar as CarIcon,
  Home as HomeIcon,
  LocalHospital as HealthIcon,
  School as EducationIcon,
  LocalAtm as LocalAtmIcon,
  Business as BusinessIcon,
  CreditCard as CreditCardIcon,
  LocalShipping as ShippingIcon,
  Build as ToolsIcon,
  People as PeopleIcon,
  Lightbulb as LightbulbIcon,
  Brush as BrushIcon,
  Storefront as StoreIcon,
  Dashboard as DashboardIcon,
  CalendarMonth as CalendarMonthIcon,
  Hotel as HotelIcon,
  Assessment as AssessmentIcon,
  Language as LanguageIcon,
  Apartment as ApartmentIcon
} from '@mui/icons-material';
import { format, parseISO, startOfMonth, endOfMonth, getMonth, getYear, subMonths, differenceInMonths, addMonths } from 'date-fns';
import { he } from 'date-fns/locale';
import { AuthContext } from '../context/AuthContext';
import { BookingContext } from '../context/BookingContext';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import {
  ResponsiveContainer,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip as RechartsTooltip,
  Legend,
  PieChart,
  Pie,
  Cell,
  LineChart,
  Line,
  AreaChart,
  Area
} from 'recharts';
import axios from 'axios';
import { toast } from 'react-hot-toast';
import { useLocation } from 'react-router-dom';
import { Link as RouterLink } from 'react-router-dom';

// קומפוננטות מותאמות אישית
const StyledCard = styled(Card)(({ theme }) => ({
  height: '100%',
  borderRadius: 16,
  boxShadow: '0 4px 20px 0 rgba(0,0,0,0.05)',
  position: 'relative',
  overflow: 'hidden',
  transition: 'all 0.3s ease',
  '&:hover': {
    transform: 'translateY(-5px)',
    boxShadow: '0 10px 30px 0 rgba(0,0,0,0.1)'
  },
  border: '1px solid',
  borderColor: theme.palette.divider,
  background: `linear-gradient(135deg, ${theme.palette.background.paper} 0%, ${alpha(theme.palette.background.paper, 0.9)} 100%)`
}));

const SectionTitle = styled(Typography)(({ theme }) => ({
  fontSize: '1.5rem',
  fontWeight: 600,
  marginBottom: theme.spacing(3),
  position: 'relative',
  '&:after': {
    content: '""',
    position: 'absolute',
    bottom: -8,
    left: 0,
    width: 60,
    height: 4,
    borderRadius: 2,
    backgroundColor: theme.palette.primary.main
  }
}));

const StatCard = ({ icon, title, value, subtext, color, trend }) => {
  const theme = useTheme();
  // קביעת צבע ברירת מחדל אם color הוא undefined
  const safeColor = color || theme.palette.primary.main;
  
  return (
    <StyledCard>
      <Box 
        sx={{
          position: 'absolute',
          top: -30,
          right: -10,
          borderRadius: '50%',
          width: 130,
          height: 130,
          background: `linear-gradient(145deg, ${alpha(safeColor, 0.12)} 20%, ${alpha(safeColor, 0.04)} 80%)`,
          zIndex: 0
        }}
      />
      <CardContent sx={{ position: 'relative', zIndex: 1, height: '100%' }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
          <Box
            sx={{
              p: 1,
              borderRadius: 2,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              bgcolor: alpha(safeColor, 0.15),
              color: safeColor
            }}
          >
            {icon}
          </Box>
          {trend && (
            <Chip
              icon={trend > 0 ? <TrendingUpIcon /> : <TrendingDownIcon />}
              label={`${Math.abs(trend)}%`}
              color={trend > 0 ? 'success' : 'error'}
              size="small"
            />
          )}
        </Box>
        <Typography variant="h4" component="div" sx={{ fontWeight: 600, mb: 0.5 }}>
          ₪{value.toLocaleString()}
        </Typography>
        <Typography gutterBottom variant="body1" color="text.primary" sx={{ fontWeight: 500 }}>
          {title}
        </Typography>
        <Typography variant="body2" color="text.secondary">
          {subtext}
        </Typography>
      </CardContent>
    </StyledCard>
  );
};

// צבעים לגרפים
const CHART_COLORS = {
  income: '#4caf50',
  expense: '#f44336',
  expenses: '#f44336', // הוספת שדה למניעת שגיאות
  balance: '#2196f3',
  categories: [
    '#00C49F',  // ירוק-תכלת מודרני
    '#FF6B6B',  // אדום-כתום רך
    '#845EC2',  // סגול עדין
    '#FFC75F',  // צהוב-כתום חם
    '#4D8076',  // ירוק כהה
    '#B0A8B9',  // סגול-אפור
    '#FF8066',  // כתום-אדום
    '#00B8A9',  // טורקיז
    '#F8A07E',  // כתום-ורוד
    '#2C73D2'   // כחול עמוק
  ]
};

// קטגוריות הוצאות והכנסות עם אייקונים
const DEFAULT_CATEGORIES = {
  expenses: [
    { id: 'salary', name: 'שכר עובדים', iconName: 'PeopleIcon', color: '#e91e63' },
    { id: 'utilities', name: 'חשבונות שירותים', iconName: 'UtilitiesIcon', color: '#9c27b0' },
    { id: 'maintenance', name: 'תחזוקה', iconName: 'ToolsIcon', color: '#673ab7' },
    { id: 'supplies', name: 'אספקה', iconName: 'GroceryIcon', color: '#3f51b5' },
    { id: 'marketing', name: 'שיווק', iconName: 'BusinessIcon', color: '#2196f3' },
    { id: 'travel', name: 'הוצאות נסיעה', iconName: 'CarIcon', color: '#03a9f4' },
    { id: 'office', name: 'הוצאות משרד', iconName: 'HomeIcon', color: '#00bcd4' },
    { id: 'cleaning', name: 'ניקיון', iconName: 'CleaningIcon', color: '#009688' },
    { id: 'rent', name: 'שכירות', iconName: 'HomeIcon', color: '#ff5722' }
  ],
  income: [
    { id: 'cash', name: 'מזומן', iconName: 'LocalAtmIcon', color: '#4caf50' },
    { id: 'credit', name: 'כרטיס אשראי', iconName: 'CreditCardIcon', color: '#8bc34a' },
    { id: 'bank', name: 'העברה בנקאית', iconName: 'AccountBalanceIcon', color: '#cddc39' },
    { id: 'paybox', name: 'PayBox', iconName: 'PaymentIcon', color: '#ffc107' },
    { id: 'bit', name: 'Bit', iconName: 'AttachMoneyIcon', color: '#ff9800' }
  ]
};

// מיפוי שמות אייקונים לקומפוננטות
const ICON_MAP = {
  PeopleIcon,
  UtilitiesIcon: LightbulbIcon,
  ToolsIcon: ToolsIcon,
  GroceryIcon: GroceryIcon,
  BusinessIcon,
  CarIcon: CarIcon,
  HomeIcon,
  CleaningIcon: BrushIcon,
  LocalAtmIcon,
  CreditCardIcon,
  AccountBalanceIcon,
  PaymentIcon,
  AttachMoneyIcon
};

const CategoryManager = ({ onClose, onCategoriesUpdate }) => {
  const theme = useTheme();
  const [categories, setCategories] = useState(DEFAULT_CATEGORIES);
  const [selectedType, setSelectedType] = useState('expenses');
  const [newCategory, setNewCategory] = useState({ 
    name: '', 
    iconName: '', 
    color: '#4caf50'
  });
  const [isAddingCategory, setIsAddingCategory] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // טעינת קטגוריות מהשרת
  const fetchCategories = useCallback(async () => {
    try {
      setLoading(true);
      const response = await axios.get(`${process.env.REACT_APP_API_URL}/financial/categories`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      
      if (response.data.success && response.data.data) {
        console.log('קטגוריות נטענו בהצלחה:', response.data.data);
        setCategories(response.data.data);
      }
    } catch (err) {
      console.error('שגיאה בטעינת קטגוריות:', err);
      setError('שגיאה בטעינת קטגוריות. משתמש בקטגוריות ברירת מחדל.');
      setCategories(DEFAULT_CATEGORIES);
    } finally {
      setLoading(false);
    }
  }, []);

  // טעינת נתונים בעת טעינת הדף
  useEffect(() => {
    fetchCategories();
  }, [fetchCategories]);

  const handleAddCategory = async () => {
    if (!newCategory.name) return;

    try {
      setLoading(true);
      const updatedCategories = {
        ...categories,
        [selectedType]: [...categories[selectedType], {
          id: newCategory.name.toLowerCase().replace(/\s+/g, '_'),
          name: newCategory.name,
          iconName: newCategory.iconName || 'BusinessIcon',
          color: newCategory.color || '#4caf50'
        }]
      };

      // שמירת הקטגוריות בשרת
      const response = await axios.put(
        `${process.env.REACT_APP_API_URL}/financial/categories`,
        updatedCategories,
        {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        }
      );

      if (response.data.success) {
        setCategories(updatedCategories);
        toast.success('הקטגוריה נוספה בהצלחה');
        onCategoriesUpdate();
      }

      setNewCategory({ 
        name: '', 
        iconName: '', 
        color: '#4caf50'
      });
      setIsAddingCategory(false);
    } catch (err) {
      console.error('שגיאה בהוספת קטגוריה:', err);
      toast.error('שגיאה בהוספת הקטגוריה');
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteCategory = async (categoryId) => {
    try {
      setLoading(true);
      const updatedCategories = {
        ...categories,
        [selectedType]: categories[selectedType].filter(cat => cat.id !== categoryId)
      };

      // עדכון הקטגוריות בשרת
      const response = await axios.put(
        `${process.env.REACT_APP_API_URL}/financial/categories`,
        updatedCategories,
        {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        }
      );

      if (response.data.success) {
        setCategories(updatedCategories);
        toast.success('הקטגוריה נמחקה בהצלחה');
        onCategoriesUpdate();
      }
    } catch (err) {
      console.error('שגיאה במחיקת קטגוריה:', err);
      toast.error('שגיאה במחיקת הקטגוריה');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog open fullWidth maxWidth="sm" onClose={onClose}>
      <DialogTitle sx={{ pb: 1 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <CategoryIcon />
          ניהול קטגוריות
        </Box>
      </DialogTitle>
      <DialogContent>
        {loading ? (
          <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
            <CircularProgress />
          </Box>
        ) : error ? (
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
        ) : (
          <>
            <Tabs
              value={selectedType}
              onChange={(e, newValue) => setSelectedType(newValue)}
              sx={{ mb: 3, borderBottom: 1, borderColor: 'divider' }}
            >
              <Tab value="expenses" label="הוצאות" />
              <Tab value="income" label="הכנסות" />
            </Tabs>

            <Grid container spacing={2}>
              {categories[selectedType] && categories[selectedType].map((category) => (
                <Grid item xs={12} sm={6} key={category.id}>
                  <Paper
                    sx={{
                      p: 2,
                      display: 'flex',
                      alignItems: 'center',
                      gap: 2,
                      bgcolor: alpha(category.color || '#4caf50', 0.1), // צבע ברירת מחדל אם אין צבע
                      border: '1px solid',
                      borderColor: alpha(category.color || '#4caf50', 0.2),
                      borderRadius: 2,
                      transition: 'all 0.2s',
                      '&:hover': {
                        bgcolor: alpha(category.color || '#4caf50', 0.15),
                        transform: 'translateY(-2px)'
                      }
                    }}
                  >
                    <Box
                      sx={{
                        width: 40,
                        height: 40,
                        borderRadius: '50%',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        bgcolor: category.color || '#4caf50',
                        color: '#fff'
                      }}
                    >
                      {ICON_MAP[category.iconName] ? React.createElement(ICON_MAP[category.iconName]) : <CategoryIcon />}
                    </Box>
                    <Typography sx={{ flex: 1 }}>{category.name}</Typography>
                    <IconButton
                      size="small"
                      color="error"
                      onClick={() => handleDeleteCategory(category.id)}
                    >
                      <DeleteIcon fontSize="small" />
                    </IconButton>
                  </Paper>
                </Grid>
              ))}
            </Grid>

            {isAddingCategory ? (
              <Box sx={{ mt: 3 }}>
                <TextField
                  fullWidth
                  label="שם הקטגוריה"
                  value={newCategory.name}
                  onChange={(e) => setNewCategory({ ...newCategory, name: e.target.value })}
                  sx={{ mb: 2 }}
                />
                <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>אייקון</InputLabel>
                  <Select
                    value={newCategory.iconName}
                    onChange={(e) => setNewCategory({ ...newCategory, iconName: e.target.value })}
                    label="אייקון"
                  >
                    <MenuItem value="PeopleIcon">אנשים</MenuItem>
                    <MenuItem value="UtilitiesIcon">חשמל</MenuItem>
                    <MenuItem value="ToolsIcon">כלים</MenuItem>
                    <MenuItem value="GroceryIcon">קניות</MenuItem>
                    <MenuItem value="BusinessIcon">עסקים</MenuItem>
                    <MenuItem value="CarIcon">רכב</MenuItem>
                    <MenuItem value="HomeIcon">בית</MenuItem>
                    <MenuItem value="CleaningIcon">ניקיון</MenuItem>
                  </Select>
                </FormControl>
                <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>צבע</InputLabel>
                  <Select
                    value={newCategory.color}
                    onChange={(e) => setNewCategory({ ...newCategory, color: e.target.value })}
                    label="צבע"
                  >
                    <MenuItem value="#4caf50">ירוק</MenuItem>
                    <MenuItem value="#f44336">אדום</MenuItem>
                    <MenuItem value="#2196f3">כחול</MenuItem>
                    <MenuItem value="#ff9800">כתום</MenuItem>
                    <MenuItem value="#9c27b0">סגול</MenuItem>
                    <MenuItem value="#795548">חום</MenuItem>
                    <MenuItem value="#607d8b">אפור</MenuItem>
                  </Select>
                </FormControl>
                <Box sx={{ display: 'flex', gap: 2 }}>
                  <Button
                    variant="outlined"
                    onClick={() => setIsAddingCategory(false)}
                    startIcon={<CancelIcon />}
                  >
                    ביטול
                  </Button>
                  <Button
                    variant="contained"
                    onClick={handleAddCategory}
                    startIcon={<SaveIcon />}
                  >
                    שמור קטגוריה
                  </Button>
                </Box>
              </Box>
            ) : (
              <Button
                fullWidth
                variant="outlined"
                startIcon={<AddIcon />}
                onClick={() => setIsAddingCategory(true)}
                sx={{ mt: 3 }}
              >
                הוסף קטגוריה חדשה
              </Button>
            )}
          </>
        )}
      </DialogContent>
    </Dialog>
  );
};

// קומפוננטה של סרגל צדדי
const MinimalSidebar = styled(Box)(({ theme }) => ({
  position: 'fixed',
  left: 0,
  top: '50%',
  transform: 'translateY(-50%)',
  display: 'flex',
  flexDirection: 'column',
  padding: '10px 0',
  backgroundColor: '#ffffff',
  boxShadow: '0 3px 10px rgba(0,0,0,0.1)',
  borderRadius: '0 8px 8px 0',
  zIndex: 100,
  gap: '5px',
  width: '60px'
}));

const SidebarButton = styled(Tooltip)(({ theme, active }) => ({
  '& .MuiButtonBase-root': {
    padding: '12px',
    color: active ? theme.palette.primary.main : theme.palette.text.secondary,
    backgroundColor: active ? alpha(theme.palette.primary.main, 0.1) : 'transparent',
    '&:hover': {
      backgroundColor: alpha(theme.palette.primary.main, 0.05)
    },
    transition: 'all 0.3s ease',
    borderLeft: active ? `3px solid ${theme.palette.primary.main}` : '3px solid transparent',
    borderRight: 'none'
  }
}));

const FinancialManagementPage = () => {
  const theme = useTheme();
  const { user } = useContext(AuthContext);
  const { bookings } = useContext(BookingContext);
  const [selectedTab, setSelectedTab] = useState(0);
  const location = useLocation();
  const currentPath = location.pathname;
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [activeTab, setActiveTab] = useState(0);
  // הוספת מצב לטאבים של המתחמים השונים
  const [selectedComplex, setSelectedComplex] = useState(0); // 0 = רוטשילד, 1 = חדרים נוספים
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [editingTransaction, setEditingTransaction] = useState(null);
  
  // נשמור עסקאות בנפרד לכל מתחם
  const [rothschildTransactions, setRothschildTransactions] = useState([]);
  const [extraRoomsTransactions, setExtraRoomsTransactions] = useState([]);
  
  // הוספת מצב להזמנות פשוטות (חדרים נוספים / אור יהודה)
  const [simpleBookings, setSimpleBookings] = useState([]);
  const [loadingSimpleBookings, setLoadingSimpleBookings] = useState(false);
  
  const [newTransaction, setNewTransaction] = useState({
    type: 'income',
    amount: '',
    category: '',
    description: '',
    date: new Date(),
    paymentMethod: 'מזומן',
    installments: 1,
    complex: 'rothschild' // נוסיף שדה למתחם - ברירת מחדל 'rothschild'
  });
  // שינוי כך שהעסקאות הן עבור המתחם הנוכחי, לפי הטאב שנבחר
  const transactions = useMemo(() => 
    selectedComplex === 0 ? rothschildTransactions : extraRoomsTransactions, 
    [selectedComplex, rothschildTransactions, extraRoomsTransactions]
  );
  
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isCategoryManagerOpen, setIsCategoryManagerOpen] = useState(false);
  const [categories, setCategories] = useState(DEFAULT_CATEGORIES);
  const [totalCapital, setTotalCapital] = useState(0);
  const [capitalByPaymentMethod, setCapitalByPaymentMethod] = useState({});
  const [loadingCapital, setLoadingCapital] = useState(false);
  const [initialBalances, setInitialBalances] = useState({});
  const [isInitialBalancesDialogOpen, setIsInitialBalancesDialogOpen] = useState(false);
  const [editingInitialBalances, setEditingInitialBalances] = useState({});

  // פונקציה לטעינת יתרות פתיחה
  const fetchInitialBalances = useCallback(async () => {
    try {
      console.log('טוען יתרות פתיחה...');
      const response = await axios.get(
        `${process.env.REACT_APP_API_URL}/financial/initialBalances`,
        {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        }
      );
      
      if (response.data.success) {
        console.log('יתרות פתיחה נטענו בהצלחה:', response.data.data);
        setInitialBalances(response.data.data);
      } else {
        console.error('שגיאה בטעינת יתרות פתיחה:', response.data);
      }
    } catch (err) {
      console.error('שגיאה בטעינת יתרות פתיחה:', err.response || err);
    }
  }, []);

  // פונקציה לעדכון יתרות פתיחה
  const updateInitialBalances = async (newBalances) => {
    try {
      console.log('מעדכן יתרות פתיחה:', newBalances);
      const response = await axios.put(
        `${process.env.REACT_APP_API_URL}/financial/initialBalances`,
        newBalances,
        {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        }
      );
      
      if (response.data.success) {
        console.log('יתרות פתיחה עודכנו בהצלחה:', response.data.data);
        setInitialBalances(response.data.data);
        toast.success('יתרות פתיחה עודכנו בהצלחה');
        calculateTotalCapital();
      } else {
        console.error('שגיאה בעדכון יתרות פתיחה:', response.data);
        toast.error('שגיאה בעדכון יתרות פתיחה');
      }
    } catch (err) {
      console.error('שגיאה בעדכון יתרות פתיחה:', err.response || err);
      toast.error('שגיאה בעדכון יתרות פתיחה');
    }
  };

  // טעינת נתונים פיננסיים לחודש מסוים
  const fetchFinancialData = useCallback(async () => {
    try {
      const currentMonth = format(selectedDate, 'yyyy-MM');
      console.log(`טוען נתונים פיננסיים לחודש: ${currentMonth}`);
      
      setLoading(true);
      setError(null);
      
      console.log('טוען יתרות פתיחה...');
      await fetchInitialBalances();
      
      // טעינת הנתונים עבור מתחם רוטשילד
      console.log('טוען נתונים עבור מתחם רוטשילד...');
      const rothschildResponse = await axios.get(
        `${process.env.REACT_APP_API_URL}/financial/transactions`,
        {
          params: {
            month: currentMonth,
            complex: 'rothschild' // פרמטר חדש שמציין את המתחם
          },
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        }
      );

      if (rothschildResponse.data.success) {
        const rothschildData = rothschildResponse.data.data;
        console.log(`נטענו ${rothschildData.length} עסקאות למתחם רוטשילד לחודש ${currentMonth}:`, rothschildData);
        
        // בדיקה מפורטת יותר של העסקאות מסוג הוצאה עבור רוטשילד
        const rothschildExpenses = rothschildData.filter(t => t.type === 'expense');
        console.log(`הוצאות במתחם רוטשילד:`, rothschildExpenses.map(t => ({
          id: t._id, 
          amount: t.amount, 
          complex: t.complex,
          description: t.description
        })));
        
        setRothschildTransactions(rothschildData);
      }

      // טעינת הנתונים עבור מתחם חדרים נוספים
      console.log('טוען נתונים עבור מתחם חדרים נוספים...');
      const extraRoomsResponse = await axios.get(
        `${process.env.REACT_APP_API_URL}/financial/transactions`,
        {
          params: {
            month: currentMonth,
            complex: 'extraRooms' // פרמטר חדש שמציין את המתחם
          },
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        }
      );

      if (extraRoomsResponse.data.success) {
        const extraRoomsData = extraRoomsResponse.data.data;
        console.log(`נטענו ${extraRoomsData.length} עסקאות למתחם חדרים נוספים לחודש ${currentMonth}:`, extraRoomsData);
        
        // בדיקה מפורטת יותר של העסקאות מסוג הוצאה עבור חדרים נוספים
        const extraRoomsExpenses = extraRoomsData.filter(t => t.type === 'expense');
        console.log(`הוצאות במתחם חדרים נוספים:`, extraRoomsExpenses.map(t => ({
          id: t._id, 
          amount: t.amount, 
          complex: t.complex,
          description: t.description
        })));
        
        setExtraRoomsTransactions(extraRoomsData);
      }
    } catch (err) {
      console.error('שגיאה בטעינת נתונים פיננסיים:', err);
      setError('שגיאה בטעינת נתונים פיננסיים');
    } finally {
      setLoading(false);
    }
  }, [selectedDate, fetchInitialBalances]);

  // פונקציה לזיהוי וטיפול בהוצאות מרוכזות כפולות
  const cleanupDuplicateSummaryExpenses = async (transactions) => {
    try {
      const cleanedTransactions = [...transactions];
      const poalimTransactions = cleanedTransactions.filter(t => 
        t.type === 'expense' && 
        t.description?.includes('הוצאה מרוכזת עבור הכנסות')
      );

      // ... rest of the function ...
    } catch (error) {
      console.error('Error in cleanupDuplicateSummaryExpenses:', error);
      return transactions;
    }
  };

  // טעינת קטגוריות מהשרת
  const fetchCategories = useCallback(async () => {
    try {
      const response = await axios.get(`${process.env.REACT_APP_API_URL}/financial/categories`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      
      if (response.data.success && response.data.data) {
        setCategories(response.data.data);
      }
    } catch (err) {
      console.error('שגיאה בטעינת קטגוריות:', err);
      setCategories(DEFAULT_CATEGORIES);
    }
  }, []);

  // פונקציה לטעינת הזמנות פשוטות עבור חדרים נוספים
  const fetchSimpleBookings = useCallback(async () => {
    try {
      const startDate = startOfMonth(selectedDate);
      const endDate = endOfMonth(selectedDate);
      
      // הערה: צריך להתאים את הלוגיקה כאן לאיך שבאמת מאחזרים הזמנות לפי חודש
      // זה תלוי במימוש בשרת ובאיך נשמרים התאריכים
      
      setLoadingSimpleBookings(true);
      console.log('טוען הזמנות פשוטות עבור חדרים נוספים...');
      
      // מחשבים את טווח התאריכים של החודש הנוכחי
      const month = format(selectedDate, 'yyyy-MM');
      const formattedStartDate = format(startDate, 'yyyy-MM-dd');
      const formattedEndDate = format(endDate, 'yyyy-MM-dd');
      
      // שליחת בקשה לשרת לקבלת כל ההזמנות של חדרים נוספים בחודש הנוכחי
      const response = await axios.get(
        `${process.env.REACT_APP_API_URL}/simple-bookings`, 
        {
          params: {
            location: 'oryehuda', // מקביל לחדרים נוספים
            startDate: formattedStartDate,
            endDate: formattedEndDate
          },
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        }
      );
      
      if (response.data.success) {
        const fetchedSimpleBookings = response.data.simpleBookings || [];
        console.log(`נטענו ${fetchedSimpleBookings.length} הזמנות פשוטות עבור חדרים נוספים`);
        setSimpleBookings(fetchedSimpleBookings);
      } else {
        console.error('שגיאה בטעינת הזמנות פשוטות:', response.data);
      }
    } catch (err) {
      console.error('שגיאה בטעינת הזמנות פשוטות:', err);
      toast.error('שגיאה בטעינת הזמנות חדרים נוספים');
    } finally {
      setLoadingSimpleBookings(false);
    }
  }, [selectedDate]);
  
  // טעינת נתונים בעת טעינת הדף
  useEffect(() => {
    fetchFinancialData();
    fetchCategories();
    fetchInitialBalances();
    fetchSimpleBookings(); // הוספת טעינת הזמנות פשוטות
  }, [fetchFinancialData, fetchCategories, fetchInitialBalances, fetchSimpleBookings]);

  // חישוב נתוני הכנסות מההזמנות
  const calculateIncomeFromBookings = useCallback(() => {
    const startDate = startOfMonth(selectedDate);
    const endDate = endOfMonth(selectedDate);

    return bookings
      .filter(booking => {
        const bookingDate = parseISO(booking.createdAt);
        return bookingDate >= startDate && bookingDate <= endDate &&
               booking.paymentStatus === 'paid' &&
               !booking.paymentMethod.startsWith('credit');
      })
      .reduce((sum, booking) => sum + (booking.totalPrice || 0), 0);
  }, [bookings, selectedDate]);

  // חישוב הכנסות לפי שיטת תשלום
  const calculateIncomeByPaymentMethod = useCallback(() => {
    const startDate = startOfMonth(selectedDate);
    const endDate = endOfMonth(selectedDate);
    const currentMonth = format(selectedDate, 'yyyy-MM');
    const incomeByMethod = {};
    
    if (selectedComplex === 0) {
      // מתחם רוטשילד
      
      // הוספת הכנסות מהזמנות רגילות
      bookings
        .filter(booking => {
          const bookingDate = parseISO(booking.createdAt);
          return bookingDate >= startDate && 
                bookingDate <= endDate &&
                booking.paymentStatus === 'paid' &&
                !booking.paymentMethod.startsWith('credit');
        })
        .forEach(booking => {
          const method = booking.paymentMethod;
          if (!incomeByMethod[method]) {
            incomeByMethod[method] = 0;
          }
          incomeByMethod[method] += booking.totalPrice || 0;
        });
        
      // הוספת הכנסות מעסקאות ידניות
      rothschildTransactions
        .filter(t => {
          try {
            return t.type === 'income' && 
                format(parseISO(t.date), 'yyyy-MM') === currentMonth &&
                (t.complex === 'rothschild' || !t.complex);
          } catch (error) {
            console.error('שגיאה בפירוש תאריך:', t.date);
            return false;
          }
        })
        .forEach(transaction => {
          const method = transaction.paymentMethod;
          if (!incomeByMethod[method]) {
            incomeByMethod[method] = 0;
          }
          incomeByMethod[method] += transaction.amount || 0;
        });
    } else {
      // מתחם חדרים נוספים - אור יהודה
      
      // הוספת הכנסות מהזמנות פשוטות
      simpleBookings
        .filter(booking => {
          try {
            return booking.isPaid && 
                  booking.paymentMethod && 
                  format(parseISO(booking.date), 'yyyy-MM') === currentMonth;
          } catch (error) {
            console.error('שגיאה בפירוש תאריך:', booking.date);
            return false;
          }
        })
        .forEach(booking => {
          const method = booking.paymentMethod;
          if (!incomeByMethod[method]) {
            incomeByMethod[method] = 0;
          }
          incomeByMethod[method] += booking.amount || 0;
        });
        
      // הוספת הכנסות מעסקאות ידניות
      extraRoomsTransactions
        .filter(t => {
          try {
            return t.type === 'income' && 
                  format(parseISO(t.date), 'yyyy-MM') === currentMonth && 
                  t.complex === 'extraRooms';
          } catch (error) {
            console.error('שגיאה בפירוש תאריך:', t.date);
            return false;
          }
        })
        .forEach(transaction => {
          const method = transaction.paymentMethod;
          if (!incomeByMethod[method]) {
            incomeByMethod[method] = 0;
          }
          incomeByMethod[method] += transaction.amount || 0;
        });
    }

    return incomeByMethod;
  }, [bookings, rothschildTransactions, extraRoomsTransactions, simpleBookings, selectedDate, selectedComplex]);

  // חישוב סך כל ההכנסות (הזמנות + עסקאות ידניות)
  const calculateTotalIncome = useCallback(() => {
    const currentMonth = format(selectedDate, 'yyyy-MM');
    
    if (selectedComplex === 0) {
      // הכנסות עבור מתחם רוטשילד
      
      // הכנסות מהזמנות רגילות של רוטשילד
      const bookingsIncome = calculateIncomeFromBookings();
      
      // הכנסות מעסקאות ידניות עבור רוטשילד
      const manualIncome = rothschildTransactions
        .filter(t => {
          try {
            return t.type === 'income' &&
                 format(parseISO(t.date), 'yyyy-MM') === currentMonth &&
                 (t.complex === 'rothschild' || !t.complex);
          } catch (error) {
            console.error('שגיאה בפירוש תאריך:', t.date);
            return false;
          }
        })
        .reduce((sum, t) => sum + (t.amount || 0), 0);
      
      console.log(`מתחם רוטשילד - הכנסות מהזמנות: ${bookingsIncome}, הכנסות ידניות: ${manualIncome}, סה"כ: ${bookingsIncome + manualIncome}`);
      
      return bookingsIncome + manualIncome;
    } else {
      // הכנסות עבור מתחם חדרים נוספים (אור יהודה)
      
      // הכנסות מהזמנות פשוטות (SimpleBookings) עבור חדרים נוספים
      const simpleBookingsIncome = simpleBookings
        .filter(booking => {
          try {
            return booking.isPaid &&
                format(parseISO(booking.date), 'yyyy-MM') === currentMonth;
          } catch (error) {
            console.error('שגיאה בפירוש תאריך:', booking.date);
            return false;
          }
        })
        .reduce((sum, booking) => sum + (booking.amount || 0), 0);
      
      // הכנסות מעסקאות ידניות עבור חדרים נוספים
      const manualIncome = extraRoomsTransactions
        .filter(t => {
          try {
            return t.type === 'income' && 
                  format(parseISO(t.date), 'yyyy-MM') === currentMonth && 
                  t.complex === 'extraRooms';
          } catch (error) {
            console.error('שגיאה בפירוש תאריך:', t.date);
            return false;
          }
        })
        .reduce((sum, t) => sum + (t.amount || 0), 0);
      
      console.log(`מתחם חדרים נוספים - הכנסות מהזמנות פשוטות: ${simpleBookingsIncome}, הכנסות ידניות: ${manualIncome}, סה"כ: ${simpleBookingsIncome + manualIncome}`);
      
      return simpleBookingsIncome + manualIncome;
    }
  }, [calculateIncomeFromBookings, rothschildTransactions, extraRoomsTransactions, simpleBookings, selectedDate, selectedComplex]);

  // פונקציית עזר אחידה לזיהוי מתחם העסקה - נשתמש בה בכל מקום בקוד
  const identifyTransactionComplex = useCallback((transaction) => {
    // אם יש שדה complex מפורש, נשתמש בו
    if (transaction.complex) {
      return transaction.complex;
    }
    
    // אחרת, בדיקה לפי התיאור או הקטגוריה
    return (transaction.description?.includes('חדרים נוספים') || 
           transaction.category?.includes('חדרים נוספים')) ? 'extraRooms' : 'rothschild';
  }, []);

  // פונקציה לבדיקה אם עסקה שייכת למתחם הנבחר הנוכחי
  const isTransactionForCurrentComplex = useCallback((transaction) => {
    const transactionComplex = identifyTransactionComplex(transaction);
    const currentComplex = selectedComplex === 0 ? 'rothschild' : 'extraRooms';
    return transactionComplex === currentComplex;
  }, [selectedComplex, identifyTransactionComplex]);

  // חישוב נתוני חודש נוכחי
  const currentMonthData = useMemo(() => {
    const income = calculateTotalIncome();
    const currentMonth = format(selectedDate, 'yyyy-MM');
    
    let expenses = 0;
    
    // במקום לאחד את כל העסקאות, נשתמש בסינון לפי המתחם הנוכחי
    const relevantTransactions = transactions.filter(t => isTransactionForCurrentComplex(t));
    
    // סינון הוצאות לפי המתחם הנבחר וחודש נוכחי
    const filteredExpenses = relevantTransactions.filter(t => {
      try {
        if (t.type !== 'expense') return false;
        return format(parseISO(t.date), 'yyyy-MM') === currentMonth;
      } catch (error) {
        console.error('Error parsing date:', t.date);
        return false;
      }
    });
    
    // חישוב סך ההוצאות
    expenses = filteredExpenses.reduce((sum, t) => sum + parseFloat(t.amount || 0), 0);
    
    console.log(`סך הוצאות למתחם ${selectedComplex === 0 ? 'רוטשילד' : 'חדרים נוספים'}: ${expenses}`);
    if (filteredExpenses.length > 0) {
      console.log('הוצאות שנכללו בחישוב:', filteredExpenses.map(t => ({
        id: t._id,
        description: t.description,
        amount: t.amount,
        complex: identifyTransactionComplex(t)
      })));
    }

    return {
      income,
      expenses,
      balance: income - expenses
    };
  }, [calculateTotalIncome, transactions, selectedDate, selectedComplex, isTransactionForCurrentComplex, identifyTransactionComplex]);

  // פונקציה לחישוב מצב ההון הכולל
  const calculateTotalCapital = useCallback(() => {
    const totalCapital = Object.values(initialBalances).reduce((sum, balance) => sum + parseFloat(balance || 0), 0);
    setTotalCapital(totalCapital);
  }, [initialBalances]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    fetchInitialBalances();
  }, [fetchInitialBalances]);

  // פונקציה לעדכון יתרות פתיחה
  useEffect(() => {
    updateInitialBalances(initialBalances);
  }, [initialBalances, updateInitialBalances]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
    calculateTotalCapital();
  }, [calculateTotalCapital]);

  // פונקציה לטעינת יתרות פתיחה
  useEffect(() => {
import React, { useState, useEffect, useContext, useMemo, useCallback } from 'react';
import {
  Container,
  Paper,
  Typography,
  Box,
  Grid,
  TextField,
  Button,
  Card,
  CardContent,
  TableContainer,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  CircularProgress,
  Alert,
  Divider,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Stack,
  Tabs,
  Tab,
  Chip,
  Breadcrumbs,
  Link,
  IconButton,
  Tooltip,
  useTheme,
  alpha,
  styled,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  InputAdornment,
  FormHelperText
} from '@mui/material';
import {
  Add as AddIcon,
  Remove as RemoveIcon,
  TrendingUp as TrendingUpIcon,
  TrendingDown as TrendingDownIcon,
  AccountBalance as AccountBalanceIcon,
  DateRange as DateRangeIcon,
  Category as CategoryIcon,
  Description as DescriptionIcon,
  AttachMoney as AttachMoneyIcon,
  Receipt as ReceiptIcon,
  Payment as PaymentIcon,
  Save as SaveIcon,
  Cancel as CancelIcon,
  FilterList as FilterListIcon,
  Download as DownloadIcon,
  Print as PrintIcon,
  Refresh as RefreshIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  ChevronRight as ChevronRightIcon,
  ChevronLeft as ChevronLeftIcon,
  Settings as SettingsIcon,
  Restaurant as RestaurantIcon,
  LocalGroceryStore as GroceryIcon,
  DirectionsCar as CarIcon,
  Home as HomeIcon,
  LocalHospital as HealthIcon,
  School as EducationIcon,
  LocalAtm as LocalAtmIcon,
  Business as BusinessIcon,
  CreditCard as CreditCardIcon,
  LocalShipping as ShippingIcon,
  Build as ToolsIcon,
  People as PeopleIcon,
  Lightbulb as LightbulbIcon,
  Brush as BrushIcon,
  Storefront as StoreIcon,
  Dashboard as DashboardIcon,
  CalendarMonth as CalendarMonthIcon,
  Hotel as HotelIcon,
  Assessment as AssessmentIcon,
  Language as LanguageIcon,
  Apartment as ApartmentIcon
} from '@mui/icons-material';
import { format, parseISO, startOfMonth, endOfMonth, getMonth, getYear, subMonths, differenceInMonths, addMonths } from 'date-fns';
import { he } from 'date-fns/locale';
import { AuthContext } from '../context/AuthContext';
import { BookingContext } from '../context/BookingContext';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import {
  ResponsiveContainer,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip as RechartsTooltip,
  Legend,
  PieChart,
  Pie,
  Cell,
  LineChart,
  Line,
  AreaChart,
  Area
} from 'recharts';
import axios from 'axios';
import { toast } from 'react-hot-toast';
import { useLocation } from 'react-router-dom';
import { Link as RouterLink } from 'react-router-dom';

// קומפוננטות מותאמות אישית
const StyledCard = styled(Card)(({ theme }) => ({
  height: '100%',
  borderRadius: 16,
  boxShadow: '0 4px 20px 0 rgba(0,0,0,0.05)',
  position: 'relative',
  overflow: 'hidden',
  transition: 'all 0.3s ease',
  '&:hover': {
    transform: 'translateY(-5px)',
    boxShadow: '0 10px 30px 0 rgba(0,0,0,0.1)'
  },
  border: '1px solid',
  borderColor: theme.palette.divider,
  background: `linear-gradient(135deg, ${theme.palette.background.paper} 0%, ${alpha(theme.palette.background.paper, 0.9)} 100%)`
}));

const SectionTitle = styled(Typography)(({ theme }) => ({
  fontSize: '1.5rem',
  fontWeight: 600,
  marginBottom: theme.spacing(3),
  position: 'relative',
  '&:after': {
    content: '""',
    position: 'absolute',
    bottom: -8,
    left: 0,
    width: 60,
    height: 4,
    borderRadius: 2,
    backgroundColor: theme.palette.primary.main
  }
}));

const StatCard = ({ icon, title, value, subtext, color, trend }) => {
  const theme = useTheme();
  // קביעת צבע ברירת מחדל אם color הוא undefined
  const safeColor = color || theme.palette.primary.main;
  
  return (
    <StyledCard>
      <Box 
        sx={{
          position: 'absolute',
          top: -30,
          right: -10,
          borderRadius: '50%',
          width: 130,
          height: 130,
          background: `linear-gradient(145deg, ${alpha(safeColor, 0.12)} 20%, ${alpha(safeColor, 0.04)} 80%)`,
          zIndex: 0
        }}
      />
      <CardContent sx={{ position: 'relative', zIndex: 1, height: '100%' }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
          <Box
            sx={{
              p: 1,
              borderRadius: 2,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              bgcolor: alpha(safeColor, 0.15),
              color: safeColor
            }}
          >
            {icon}
          </Box>
          {trend && (
            <Chip
              icon={trend > 0 ? <TrendingUpIcon /> : <TrendingDownIcon />}
              label={`${Math.abs(trend)}%`}
              color={trend > 0 ? 'success' : 'error'}
              size="small"
            />
          )}
        </Box>
        <Typography variant="h4" component="div" sx={{ fontWeight: 600, mb: 0.5 }}>
          ₪{value.toLocaleString()}
        </Typography>
        <Typography gutterBottom variant="body1" color="text.primary" sx={{ fontWeight: 500 }}>
          {title}
        </Typography>
        <Typography variant="body2" color="text.secondary">
          {subtext}
        </Typography>
      </CardContent>
    </StyledCard>
  );
};

// צבעים לגרפים
const CHART_COLORS = {
  income: '#4caf50',
  expense: '#f44336',
  expenses: '#f44336', // הוספת שדה למניעת שגיאות
  balance: '#2196f3',
  categories: [
    '#00C49F',  // ירוק-תכלת מודרני
    '#FF6B6B',  // אדום-כתום רך
    '#845EC2',  // סגול עדין
    '#FFC75F',  // צהוב-כתום חם
    '#4D8076',  // ירוק כהה
    '#B0A8B9',  // סגול-אפור
    '#FF8066',  // כתום-אדום
    '#00B8A9',  // טורקיז
    '#F8A07E',  // כתום-ורוד
    '#2C73D2'   // כחול עמוק
  ]
};

// קטגוריות הוצאות והכנסות עם אייקונים
const DEFAULT_CATEGORIES = {
  expenses: [
    { id: 'salary', name: 'שכר עובדים', iconName: 'PeopleIcon', color: '#e91e63' },
    { id: 'utilities', name: 'חשבונות שירותים', iconName: 'UtilitiesIcon', color: '#9c27b0' },
    { id: 'maintenance', name: 'תחזוקה', iconName: 'ToolsIcon', color: '#673ab7' },
    { id: 'supplies', name: 'אספקה', iconName: 'GroceryIcon', color: '#3f51b5' },
    { id: 'marketing', name: 'שיווק', iconName: 'BusinessIcon', color: '#2196f3' },
    { id: 'travel', name: 'הוצאות נסיעה', iconName: 'CarIcon', color: '#03a9f4' },
    { id: 'office', name: 'הוצאות משרד', iconName: 'HomeIcon', color: '#00bcd4' },
    { id: 'cleaning', name: 'ניקיון', iconName: 'CleaningIcon', color: '#009688' },
    { id: 'rent', name: 'שכירות', iconName: 'HomeIcon', color: '#ff5722' }
  ],
  income: [
    { id: 'cash', name: 'מזומן', iconName: 'LocalAtmIcon', color: '#4caf50' },
    { id: 'credit', name: 'כרטיס אשראי', iconName: 'CreditCardIcon', color: '#8bc34a' },
    { id: 'bank', name: 'העברה בנקאית', iconName: 'AccountBalanceIcon', color: '#cddc39' },
    { id: 'paybox', name: 'PayBox', iconName: 'PaymentIcon', color: '#ffc107' },
    { id: 'bit', name: 'Bit', iconName: 'AttachMoneyIcon', color: '#ff9800' }
  ]
};

// מיפוי שמות אייקונים לקומפוננטות
const ICON_MAP = {
  PeopleIcon,
  UtilitiesIcon: LightbulbIcon,
  ToolsIcon: ToolsIcon,
  GroceryIcon: GroceryIcon,
  BusinessIcon,
  CarIcon: CarIcon,
  HomeIcon,
  CleaningIcon: BrushIcon,
  LocalAtmIcon,
  CreditCardIcon,
  AccountBalanceIcon,
  PaymentIcon,
  AttachMoneyIcon
};

const CategoryManager = ({ onClose, onCategoriesUpdate }) => {
  const theme = useTheme();
  const [categories, setCategories] = useState(DEFAULT_CATEGORIES);
  const [selectedType, setSelectedType] = useState('expenses');
  const [newCategory, setNewCategory] = useState({ 
    name: '', 
    iconName: '', 
    color: '#4caf50'
  });
  const [isAddingCategory, setIsAddingCategory] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // טעינת קטגוריות מהשרת
  const fetchCategories = useCallback(async () => {
    try {
      setLoading(true);
      const response = await axios.get(`${process.env.REACT_APP_API_URL}/financial/categories`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      
      if (response.data.success && response.data.data) {
        console.log('קטגוריות נטענו בהצלחה:', response.data.data);
        setCategories(response.data.data);
      }
    } catch (err) {
      console.error('שגיאה בטעינת קטגוריות:', err);
      setError('שגיאה בטעינת קטגוריות. משתמש בקטגוריות ברירת מחדל.');
      setCategories(DEFAULT_CATEGORIES);
    } finally {
      setLoading(false);
    }
  }, []);

  // טעינת נתונים בעת טעינת הדף
  useEffect(() => {
    fetchCategories();
  }, [fetchCategories]);

  const handleAddCategory = async () => {
    if (!newCategory.name) return;

    try {
      setLoading(true);
      const updatedCategories = {
        ...categories,
        [selectedType]: [...categories[selectedType], {
          id: newCategory.name.toLowerCase().replace(/\s+/g, '_'),
          name: newCategory.name,
          iconName: newCategory.iconName || 'BusinessIcon',
          color: newCategory.color || '#4caf50'
        }]
      };

      // שמירת הקטגוריות בשרת
      const response = await axios.put(
        `${process.env.REACT_APP_API_URL}/financial/categories`,
        updatedCategories,
        {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        }
      );

      if (response.data.success) {
        setCategories(updatedCategories);
        toast.success('הקטגוריה נוספה בהצלחה');
        onCategoriesUpdate();
      }

      setNewCategory({ 
        name: '', 
        iconName: '', 
        color: '#4caf50'
      });
      setIsAddingCategory(false);
    } catch (err) {
      console.error('שגיאה בהוספת קטגוריה:', err);
      toast.error('שגיאה בהוספת הקטגוריה');
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteCategory = async (categoryId) => {
    try {
      setLoading(true);
      const updatedCategories = {
        ...categories,
        [selectedType]: categories[selectedType].filter(cat => cat.id !== categoryId)
      };

      // עדכון הקטגוריות בשרת
      const response = await axios.put(
        `${process.env.REACT_APP_API_URL}/financial/categories`,
        updatedCategories,
        {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        }
      );

      if (response.data.success) {
        setCategories(updatedCategories);
        toast.success('הקטגוריה נמחקה בהצלחה');
        onCategoriesUpdate();
      }
    } catch (err) {
      console.error('שגיאה במחיקת קטגוריה:', err);
      toast.error('שגיאה במחיקת הקטגוריה');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog open fullWidth maxWidth="sm" onClose={onClose}>
      <DialogTitle sx={{ pb: 1 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <CategoryIcon />
          ניהול קטגוריות
        </Box>
      </DialogTitle>
      <DialogContent>
        {loading ? (
          <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
            <CircularProgress />
          </Box>
        ) : error ? (
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
        ) : (
          <>
            <Tabs
              value={selectedType}
              onChange={(e, newValue) => setSelectedType(newValue)}
              sx={{ mb: 3, borderBottom: 1, borderColor: 'divider' }}
            >
              <Tab value="expenses" label="הוצאות" />
              <Tab value="income" label="הכנסות" />
            </Tabs>

            <Grid container spacing={2}>
              {categories[selectedType] && categories[selectedType].map((category) => (
                <Grid item xs={12} sm={6} key={category.id}>
                  <Paper
                    sx={{
                      p: 2,
                      display: 'flex',
                      alignItems: 'center',
                      gap: 2,
                      bgcolor: alpha(category.color || '#4caf50', 0.1), // צבע ברירת מחדל אם אין צבע
                      border: '1px solid',
                      borderColor: alpha(category.color || '#4caf50', 0.2),
                      borderRadius: 2,
                      transition: 'all 0.2s',
                      '&:hover': {
                        bgcolor: alpha(category.color || '#4caf50', 0.15),
                        transform: 'translateY(-2px)'
                      }
                    }}
                  >
                    <Box
                      sx={{
                        width: 40,
                        height: 40,
                        borderRadius: '50%',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        bgcolor: category.color || '#4caf50',
                        color: '#fff'
                      }}
                    >
                      {ICON_MAP[category.iconName] ? React.createElement(ICON_MAP[category.iconName]) : <CategoryIcon />}
                    </Box>
                    <Typography sx={{ flex: 1 }}>{category.name}</Typography>
                    <IconButton
                      size="small"
                      color="error"
                      onClick={() => handleDeleteCategory(category.id)}
                    >
                      <DeleteIcon fontSize="small" />
                    </IconButton>
                  </Paper>
                </Grid>
              ))}
            </Grid>

            {isAddingCategory ? (
              <Box sx={{ mt: 3 }}>
                <TextField
                  fullWidth
                  label="שם הקטגוריה"
                  value={newCategory.name}
                  onChange={(e) => setNewCategory({ ...newCategory, name: e.target.value })}
                  sx={{ mb: 2 }}
                />
                <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>אייקון</InputLabel>
                  <Select
                    value={newCategory.iconName}
                    onChange={(e) => setNewCategory({ ...newCategory, iconName: e.target.value })}
                    label="אייקון"
                  >
                    <MenuItem value="PeopleIcon">אנשים</MenuItem>
                    <MenuItem value="UtilitiesIcon">חשמל</MenuItem>
                    <MenuItem value="ToolsIcon">כלים</MenuItem>
                    <MenuItem value="GroceryIcon">קניות</MenuItem>
                    <MenuItem value="BusinessIcon">עסקים</MenuItem>
                    <MenuItem value="CarIcon">רכב</MenuItem>
                    <MenuItem value="HomeIcon">בית</MenuItem>
                    <MenuItem value="CleaningIcon">ניקיון</MenuItem>
                  </Select>
                </FormControl>
                <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>צבע</InputLabel>
                  <Select
                    value={newCategory.color}
                    onChange={(e) => setNewCategory({ ...newCategory, color: e.target.value })}
                    label="צבע"
                  >
                    <MenuItem value="#4caf50">ירוק</MenuItem>
                    <MenuItem value="#f44336">אדום</MenuItem>
                    <MenuItem value="#2196f3">כחול</MenuItem>
                    <MenuItem value="#ff9800">כתום</MenuItem>
                    <MenuItem value="#9c27b0">סגול</MenuItem>
                    <MenuItem value="#795548">חום</MenuItem>
                    <MenuItem value="#607d8b">אפור</MenuItem>
                  </Select>
                </FormControl>
                <Box sx={{ display: 'flex', gap: 2 }}>
                  <Button
                    variant="outlined"
                    onClick={() => setIsAddingCategory(false)}
                    startIcon={<CancelIcon />}
                  >
                    ביטול
                  </Button>
                  <Button
                    variant="contained"
                    onClick={handleAddCategory}
                    startIcon={<SaveIcon />}
                  >
                    שמור קטגוריה
                  </Button>
                </Box>
              </Box>
            ) : (
              <Button
                fullWidth
                variant="outlined"
                startIcon={<AddIcon />}
                onClick={() => setIsAddingCategory(true)}
                sx={{ mt: 3 }}
              >
                הוסף קטגוריה חדשה
              </Button>
            )}
          </>
        )}
      </DialogContent>
    </Dialog>
  );
};

// קומפוננטה של סרגל צדדי
const MinimalSidebar = styled(Box)(({ theme }) => ({
  position: 'fixed',
  left: 0,
  top: '50%',
  transform: 'translateY(-50%)',
  display: 'flex',
  flexDirection: 'column',
  padding: '10px 0',
  backgroundColor: '#ffffff',
  boxShadow: '0 3px 10px rgba(0,0,0,0.1)',
  borderRadius: '0 8px 8px 0',
  zIndex: 100,
  gap: '5px',
  width: '60px'
}));

const SidebarButton = styled(Tooltip)(({ theme, active }) => ({
  '& .MuiButtonBase-root': {
    padding: '12px',
    color: active ? theme.palette.primary.main : theme.palette.text.secondary,
    backgroundColor: active ? alpha(theme.palette.primary.main, 0.1) : 'transparent',
    '&:hover': {
      backgroundColor: alpha(theme.palette.primary.main, 0.05)
    },
    transition: 'all 0.3s ease',
    borderLeft: active ? `3px solid ${theme.palette.primary.main}` : '3px solid transparent',
    borderRight: 'none'
  }
}));

const FinancialManagementPage = () => {
  const theme = useTheme();
  const { user } = useContext(AuthContext);
  const { bookings } = useContext(BookingContext);
  const [selectedTab, setSelectedTab] = useState(0);
  const location = useLocation();
  const currentPath = location.pathname;
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [activeTab, setActiveTab] = useState(0);
  // הוספת מצב לטאבים של המתחמים השונים
  const [selectedComplex, setSelectedComplex] = useState(0); // 0 = רוטשילד, 1 = חדרים נוספים
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [editingTransaction, setEditingTransaction] = useState(null);
  
  // נשמור עסקאות בנפרד לכל מתחם
  const [rothschildTransactions, setRothschildTransactions] = useState([]);
  const [extraRoomsTransactions, setExtraRoomsTransactions] = useState([]);
  
  // הוספת מצב להזמנות פשוטות (חדרים נוספים / אור יהודה)
  const [simpleBookings, setSimpleBookings] = useState([]);
  const [loadingSimpleBookings, setLoadingSimpleBookings] = useState(false);
  
  const [newTransaction, setNewTransaction] = useState({
    type: 'income',
    amount: '',
    category: '',
    description: '',
    date: new Date(),
    paymentMethod: 'מזומן',
    installments: 1,
    complex: 'rothschild' // נוסיף שדה למתחם - ברירת מחדל 'rothschild'
  });
  // שינוי כך שהעסקאות הן עבור המתחם הנוכחי, לפי הטאב שנבחר
  const transactions = useMemo(() => 
    selectedComplex === 0 ? rothschildTransactions : extraRoomsTransactions, 
    [selectedComplex, rothschildTransactions, extraRoomsTransactions]
  );
  
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isCategoryManagerOpen, setIsCategoryManagerOpen] = useState(false);
  const [categories, setCategories] = useState(DEFAULT_CATEGORIES);
  const [totalCapital, setTotalCapital] = useState(0);
  const [capitalByPaymentMethod, setCapitalByPaymentMethod] = useState({});
  const [loadingCapital, setLoadingCapital] = useState(false);
  const [initialBalances, setInitialBalances] = useState({});
  const [isInitialBalancesDialogOpen, setIsInitialBalancesDialogOpen] = useState(false);
  const [editingInitialBalances, setEditingInitialBalances] = useState({});

  // פונקציה לטעינת יתרות פתיחה
  const fetchInitialBalances = useCallback(async () => {
    try {
      console.log('טוען יתרות פתיחה...');
      const response = await axios.get(
        `${process.env.REACT_APP_API_URL}/financial/initialBalances`,
        {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        }
      );
      
      if (response.data.success) {
        console.log('יתרות פתיחה נטענו בהצלחה:', response.data.data);
        setInitialBalances(response.data.data);
      } else {
        console.error('שגיאה בטעינת יתרות פתיחה:', response.data);
      }
    } catch (err) {
      console.error('שגיאה בטעינת יתרות פתיחה:', err.response || err);
    }
  }, []);

  // פונקציה לעדכון יתרות פתיחה
  const updateInitialBalances = async (newBalances) => {
    try {
      console.log('מעדכן יתרות פתיחה:', newBalances);
      const response = await axios.put(
        `${process.env.REACT_APP_API_URL}/financial/initialBalances`,
        newBalances,
        {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        }
      );
      
      if (response.data.success) {
        console.log('יתרות פתיחה עודכנו בהצלחה:', response.data.data);
        setInitialBalances(response.data.data);
        toast.success('יתרות פתיחה עודכנו בהצלחה');
        calculateTotalCapital();
      } else {
        console.error('שגיאה בעדכון יתרות פתיחה:', response.data);
        toast.error('שגיאה בעדכון יתרות פתיחה');
      }
    } catch (err) {
      console.error('שגיאה בעדכון יתרות פתיחה:', err.response || err);
      toast.error('שגיאה בעדכון יתרות פתיחה');
    }
  };

  // טעינת נתונים פיננסיים לחודש מסוים
  const fetchFinancialData = useCallback(async () => {
    try {
      const currentMonth = format(selectedDate, 'yyyy-MM');
      console.log(`טוען נתונים פיננסיים לחודש: ${currentMonth}`);
      
      setLoading(true);
      setError(null);
      
      console.log('טוען יתרות פתיחה...');
      await fetchInitialBalances();
      
      // טעינת הנתונים עבור מתחם רוטשילד
      console.log('טוען נתונים עבור מתחם רוטשילד...');
      const rothschildResponse = await axios.get(
        `${process.env.REACT_APP_API_URL}/financial/transactions`,
        {
          params: {
            month: currentMonth,
            complex: 'rothschild' // פרמטר חדש שמציין את המתחם
          },
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        }
      );

      if (rothschildResponse.data.success) {
        const rothschildData = rothschildResponse.data.data;
        console.log(`נטענו ${rothschildData.length} עסקאות למתחם רוטשילד לחודש ${currentMonth}:`, rothschildData);
        
        // בדיקה מפורטת יותר של העסקאות מסוג הוצאה עבור רוטשילד
        const rothschildExpenses = rothschildData.filter(t => t.type === 'expense');
        console.log(`הוצאות במתחם רוטשילד:`, rothschildExpenses.map(t => ({
          id: t._id, 
          amount: t.amount, 
          complex: t.complex,
          description: t.description
        })));
        
        setRothschildTransactions(rothschildData);
      }

      // טעינת הנתונים עבור מתחם חדרים נוספים
      console.log('טוען נתונים עבור מתחם חדרים נוספים...');
      const extraRoomsResponse = await axios.get(
        `${process.env.REACT_APP_API_URL}/financial/transactions`,
        {
          params: {
            month: currentMonth,
            complex: 'extraRooms' // פרמטר חדש שמציין את המתחם
          },
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        }
      );

      if (extraRoomsResponse.data.success) {
        const extraRoomsData = extraRoomsResponse.data.data;
        console.log(`נטענו ${extraRoomsData.length} עסקאות למתחם חדרים נוספים לחודש ${currentMonth}:`, extraRoomsData);
        
        // בדיקה מפורטת יותר של העסקאות מסוג הוצאה עבור חדרים נוספים
        const extraRoomsExpenses = extraRoomsData.filter(t => t.type === 'expense');
        console.log(`הוצאות במתחם חדרים נוספים:`, extraRoomsExpenses.map(t => ({
          id: t._id, 
          amount: t.amount, 
          complex: t.complex,
          description: t.description
        })));
        
        setExtraRoomsTransactions(extraRoomsData);
      }
    } catch (err) {
      console.error('שגיאה בטעינת נתונים פיננסיים:', err);
      setError('שגיאה בטעינת נתונים פיננסיים');
    } finally {
      setLoading(false);
    }
  }, [selectedDate, fetchInitialBalances]);

  // פונקציה לזיהוי וטיפול בהוצאות מרוכזות כפולות
  const cleanupDuplicateSummaryExpenses = async (transactions) => {
    try {
      const cleanedTransactions = [...transactions];
      const poalimTransactions = cleanedTransactions.filter(t => 
        t.type === 'expense' && 
        t.description?.includes('הוצאה מרוכזת עבור הכנסות')
      );

      // ... rest of the function ...
    } catch (error) {
      console.error('Error in cleanupDuplicateSummaryExpenses:', error);
      return transactions;
    }
  };

  // טעינת קטגוריות מהשרת
  const fetchCategories = useCallback(async () => {
    try {
      const response = await axios.get(`${process.env.REACT_APP_API_URL}/financial/categories`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      
      if (response.data.success && response.data.data) {
        setCategories(response.data.data);
      }
    } catch (err) {
      console.error('שגיאה בטעינת קטגוריות:', err);
      setCategories(DEFAULT_CATEGORIES);
    }
  }, []);

  // פונקציה לטעינת הזמנות פשוטות עבור חדרים נוספים
  const fetchSimpleBookings = useCallback(async () => {
    try {
      const startDate = startOfMonth(selectedDate);
      const endDate = endOfMonth(selectedDate);
      
      // הערה: צריך להתאים את הלוגיקה כאן לאיך שבאמת מאחזרים הזמנות לפי חודש
      // זה תלוי במימוש בשרת ובאיך נשמרים התאריכים
      
      setLoadingSimpleBookings(true);
      console.log('טוען הזמנות פשוטות עבור חדרים נוספים...');
      
      // מחשבים את טווח התאריכים של החודש הנוכחי
      const month = format(selectedDate, 'yyyy-MM');
      const formattedStartDate = format(startDate, 'yyyy-MM-dd');
      const formattedEndDate = format(endDate, 'yyyy-MM-dd');
      
      // שליחת בקשה לשרת לקבלת כל ההזמנות של חדרים נוספים בחודש הנוכחי
      const response = await axios.get(
        `${process.env.REACT_APP_API_URL}/simple-bookings`, 
        {
          params: {
            location: 'oryehuda', // מקביל לחדרים נוספים
            startDate: formattedStartDate,
            endDate: formattedEndDate
          },
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        }
      );
      
      if (response.data.success) {
        const fetchedSimpleBookings = response.data.simpleBookings || [];
        console.log(`נטענו ${fetchedSimpleBookings.length} הזמנות פשוטות עבור חדרים נוספים`);
        setSimpleBookings(fetchedSimpleBookings);
      } else {
        console.error('שגיאה בטעינת הזמנות פשוטות:', response.data);
      }
    } catch (err) {
      console.error('שגיאה בטעינת הזמנות פשוטות:', err);
      toast.error('שגיאה בטעינת הזמנות חדרים נוספים');
    } finally {
      setLoadingSimpleBookings(false);
    }
  }, [selectedDate]);
  
  // טעינת נתונים בעת טעינת הדף
  useEffect(() => {
    fetchFinancialData();
    fetchCategories();
    fetchInitialBalances();
    fetchSimpleBookings(); // הוספת טעינת הזמנות פשוטות
  }, [fetchFinancialData, fetchCategories, fetchInitialBalances, fetchSimpleBookings]);

  // חישוב נתוני הכנסות מההזמנות
  const calculateIncomeFromBookings = useCallback(() => {
    const startDate = startOfMonth(selectedDate);
    const endDate = endOfMonth(selectedDate);

    return bookings
      .filter(booking => {
        const bookingDate = parseISO(booking.createdAt);
        return bookingDate >= startDate && bookingDate <= endDate &&
               booking.paymentStatus === 'paid' &&
               !booking.paymentMethod.startsWith('credit');
      })
      .reduce((sum, booking) => sum + (booking.totalPrice || 0), 0);
  }, [bookings, selectedDate]);

  // חישוב הכנסות לפי שיטת תשלום
  const calculateIncomeByPaymentMethod = useCallback(() => {
    const startDate = startOfMonth(selectedDate);
    const endDate = endOfMonth(selectedDate);
    const currentMonth = format(selectedDate, 'yyyy-MM');
    const incomeByMethod = {};
    
    if (selectedComplex === 0) {
      // מתחם רוטשילד
      
      // הוספת הכנסות מהזמנות רגילות
      bookings
        .filter(booking => {
          const bookingDate = parseISO(booking.createdAt);
          return bookingDate >= startDate && 
                bookingDate <= endDate &&
                booking.paymentStatus === 'paid' &&
                !booking.paymentMethod.startsWith('credit');
        })
        .forEach(booking => {
          const method = booking.paymentMethod;
          if (!incomeByMethod[method]) {
            incomeByMethod[method] = 0;
          }
          incomeByMethod[method] += booking.totalPrice || 0;
        });
        
      // הוספת הכנסות מעסקאות ידניות
      rothschildTransactions
        .filter(t => {
          try {
            return t.type === 'income' && 
                format(parseISO(t.date), 'yyyy-MM') === currentMonth &&
                (t.complex === 'rothschild' || !t.complex);
          } catch (error) {
            console.error('שגיאה בפירוש תאריך:', t.date);
            return false;
          }
        })
        .forEach(transaction => {
          const method = transaction.paymentMethod;
          if (!incomeByMethod[method]) {
            incomeByMethod[method] = 0;
          }
          incomeByMethod[method] += transaction.amount || 0;
        });
    } else {
      // מתחם חדרים נוספים - אור יהודה
      
      // הוספת הכנסות מהזמנות פשוטות
      simpleBookings
        .filter(booking => {
          try {
            return booking.isPaid && 
                  booking.paymentMethod && 
                  format(parseISO(booking.date), 'yyyy-MM') === currentMonth;
          } catch (error) {
            console.error('שגיאה בפירוש תאריך:', booking.date);
            return false;
          }
        })
        .forEach(booking => {
          const method = booking.paymentMethod;
          if (!incomeByMethod[method]) {
            incomeByMethod[method] = 0;
          }
          incomeByMethod[method] += booking.amount || 0;
        });
        
      // הוספת הכנסות מעסקאות ידניות
      extraRoomsTransactions
        .filter(t => {
          try {
            return t.type === 'income' && 
                  format(parseISO(t.date), 'yyyy-MM') === currentMonth &&
                  t.complex === 'extraRooms';
          } catch (error) {
            console.error('שגיאה בפירוש תאריך:', t.date);
            return false;
          }
        })
        .forEach(transaction => {
          const method = transaction.paymentMethod;
          if (!incomeByMethod[method]) {
            incomeByMethod[method] = 0;
          }
          incomeByMethod[method] += transaction.amount || 0;
        });
    }

    return incomeByMethod;
  }, [bookings, rothschildTransactions, extraRoomsTransactions, simpleBookings, selectedDate, selectedComplex]);

  // חישוב סך כל ההכנסות (הזמנות + עסקאות ידניות)
  const calculateTotalIncome = useCallback(() => {
    const currentMonth = format(selectedDate, 'yyyy-MM');
    
    if (selectedComplex === 0) {
      // הכנסות עבור מתחם רוטשילד
      
      // הכנסות מהזמנות רגילות של רוטשילד
      const bookingsIncome = calculateIncomeFromBookings();
      
      // הכנסות מעסקאות ידניות עבור רוטשילד
      const manualIncome = rothschildTransactions
        .filter(t => {
          try {
            return t.type === 'income' &&
                 format(parseISO(t.date), 'yyyy-MM') === currentMonth &&
                 (t.complex === 'rothschild' || !t.complex);
          } catch (error) {
            console.error('שגיאה בפירוש תאריך:', t.date);
            return false;
          }
        })
        .reduce((sum, t) => sum + (t.amount || 0), 0);
      
      console.log(`מתחם רוטשילד - הכנסות מהזמנות: ${bookingsIncome}, הכנסות ידניות: ${manualIncome}, סה"כ: ${bookingsIncome + manualIncome}`);
      
      return bookingsIncome + manualIncome;
    } else {
      // הכנסות עבור מתחם חדרים נוספים (אור יהודה)
      
      // הכנסות מהזמנות פשוטות (SimpleBookings) עבור חדרים נוספים
      const simpleBookingsIncome = simpleBookings
        .filter(booking => {
          try {
            return booking.isPaid &&
                format(parseISO(booking.date), 'yyyy-MM') === currentMonth;
          } catch (error) {
            console.error('שגיאה בפירוש תאריך:', booking.date);
            return false;
          }
        })
        .reduce((sum, booking) => sum + (booking.amount || 0), 0);
      
      // הכנסות מעסקאות ידניות עבור חדרים נוספים
      const manualIncome = extraRoomsTransactions
        .filter(t => {
          try {
            return t.type === 'income' && 
                  format(parseISO(t.date), 'yyyy-MM') === currentMonth && 
                  t.complex === 'extraRooms';
          } catch (error) {
            console.error('שגיאה בפירוש תאריך:', t.date);
            return false;
          }
        })
        .reduce((sum, t) => sum + (t.amount || 0), 0);
      
      console.log(`מתחם חדרים נוספים - הכנסות מהזמנות פשוטות: ${simpleBookingsIncome}, הכנסות ידניות: ${manualIncome}, סה"כ: ${simpleBookingsIncome + manualIncome}`);
      
      return simpleBookingsIncome + manualIncome;
    }
  }, [calculateIncomeFromBookings, rothschildTransactions, extraRoomsTransactions, simpleBookings, selectedDate, selectedComplex]);

  // פונקציית עזר אחידה לזיהוי מתחם העסקה - נשתמש בה בכל מקום בקוד
  const identifyTransactionComplex = useCallback((transaction) => {
    // אם יש שדה complex מפורש, נשתמש בו
    if (transaction.complex) {
      return transaction.complex;
    }
    
    // אחרת, בדיקה לפי התיאור או הקטגוריה
    return (transaction.description?.includes('חדרים נוספים') || 
           transaction.category?.includes('חדרים נוספים')) ? 'extraRooms' : 'rothschild';
  }, []);

  // פונקציה לבדיקה אם עסקה שייכת למתחם הנבחר הנוכחי
  const isTransactionForCurrentComplex = useCallback((transaction) => {
    const transactionComplex = identifyTransactionComplex(transaction);
    const currentComplex = selectedComplex === 0 ? 'rothschild' : 'extraRooms';
    return transactionComplex === currentComplex;
  }, [selectedComplex, identifyTransactionComplex]);

  // חישוב נתוני חודש נוכחי
  const currentMonthData = useMemo(() => {
    const income = calculateTotalIncome();
                                  }).length === 0 && (
                                    <TableRow>
                                      <TableCell colSpan={6} align="center" sx={{ py: 3 }}>
                                        <Typography variant="body2" color="text.secondary">
                                          לא נמצאו עסקאות הכנסה לחודש זה
                                        </Typography>
                                      </TableCell>
                                    </TableRow>
                                  )}
                              </TableBody>
                            </Table>
                          </TableContainer>
                        </Paper>
                      </Grid>

                      {/* צד שמאל - הוצאות */}
                      <Grid item xs={12} md={6}>
                        <Paper sx={{ p: 3, mb: 4, borderRadius: 3, boxShadow: '0 4px 20px 0 rgba(0,0,0,0.05)' }}>
                          <SectionTitle variant="h5" gutterBottom>
                            הוצאות {selectedComplex === 0 ? 'מתחם רוטשילד' : 'חדרים נוספים'}
                          </SectionTitle>
                          <Box sx={{ mb: 4 }}>
                            <StatCard
                              icon={<TrendingDownIcon />}
                              title={`הוצאות חודש נוכחי ${selectedComplex === 0 ? '(מתחם רוטשילד)' : '(חדרים נוספים)'}`}
                              value={currentMonthData.expenses}
                              subtext="סה״כ הוצאות"
                              color={CHART_COLORS.expenses}
                              trend={calculateTrend(currentMonthData.expenses, previousMonthData.expenses) * -1}
                              invertTrend
                            />
                          </Box>

                          {/* טבלת הוצאות */}
                          <TableContainer component={Paper} sx={{ borderRadius: 2, boxShadow: 'none', border: '1px solid', borderColor: 'divider' }}>
                            <Table>
                              <TableHead>
                                <TableRow>
                                  <TableCell sx={{ fontWeight: 600 }}>תאריך</TableCell>
                                  <TableCell sx={{ fontWeight: 600 }}>קטגוריה</TableCell>
                                  <TableCell sx={{ fontWeight: 600 }}>תיאור</TableCell>
                                  <TableCell sx={{ fontWeight: 600 }}>שיטת תשלום</TableCell>
                                  <TableCell align="right" sx={{ fontWeight: 600 }}>סכום</TableCell>
                                  <TableCell sx={{ fontWeight: 600 }}>פעולות</TableCell>
                                </TableRow>
                              </TableHead>
                              <TableBody>
                                {(() => {
                                  const currentComplex = selectedComplex === 0 ? 'rothschild' : 'extraRooms';
                                  console.log(`בדיקת סינון הוצאות עבור מתחם: ${currentComplex}`);
                                  
                                  // סינון העסקאות לפי שדה ה-complex בלבד
                                  const filteredExpenses = transactions.filter(t => 
                                    t.type === 'expense' && t.complex === currentComplex
                                  );
                                  
                                  console.log(`מציג ${filteredExpenses.length} עסקאות הוצאה עבור המתחם ${selectedComplex === 0 ? 'רוטשילד' : 'חדרים נוספים'}`);
                                  if (filteredExpenses.length > 0) {
                                    console.log("סיכום הוצאות:", filteredExpenses.map(t => ({
                                      id: t._id,
                                      amount: t.amount,
                                      complex: t.complex,
                                      description: t.description
                                    })));
                                    
                                    return filteredExpenses.map((transaction) => (
                                      <TableRow key={transaction._id} hover>
                                        <TableCell>{format(parseISO(transaction.date), 'dd/MM/yyyy')}</TableCell>
                                        <TableCell>{transaction.category}</TableCell>
                                        <TableCell>{transaction.description}</TableCell>
                                        <TableCell>
                                          <Chip
                                            label={getPaymentMethodLabel(transaction.paymentMethod)}
                                            size="small"
                                            color="primary"
                                            variant="outlined"
                                          />
                                        </TableCell>
                                        <TableCell align="right" sx={{ color: CHART_COLORS.expenses }}>
                                          ₪{transaction.amount.toLocaleString()}
                                        </TableCell>
                                        <TableCell>
                                          <IconButton size="small" sx={{ mr: 1 }} onClick={() => handleOpenEditDialog(transaction)}>
                                            <EditIcon fontSize="small" />
                                          </IconButton>
                                          <IconButton size="small" color="error" onClick={() => handleDeleteTransaction(transaction._id)}>
                                            <DeleteIcon fontSize="small" />
                                          </IconButton>
                                        </TableCell>
                                      </TableRow>
                                    ));
                                  }
                                  
                                  return (
                                    <TableRow>
                                      <TableCell colSpan={6} align="center" sx={{ py: 3 }}>
                                        <Typography variant="body2" color="text.secondary">
                                          לא נמצאו עסקאות הוצאה לחודש זה
                                        </Typography>
                                      </TableCell>
                                    </TableRow>
                                  );
                                })()}

                                {transactions.filter(t => {
                                  if (t.type !== 'expense') return false;
                                  const transactionComplex = t.complex || 'rothschild';
                                  const currentComplex = selectedComplex === 0 ? 'rothschild' : 'extraRooms';
                                  return transactionComplex === currentComplex;
                                }).length === 0 && (
                                  <TableRow>
                                    <TableCell colSpan={6} align="center" sx={{ py: 3 }}>
                                      <Typography variant="body2" color="text.secondary">
                                        לא נמצאו עסקאות הוצאה לחודש זה
                                      </Typography>
                                    </TableCell>
                                  </TableRow>
                                )}
                              </TableBody>
                            </Table>
                          </TableContainer>
                        </Paper>
                      </Grid>
                    </Grid>

                    {/* דיאלוג הוספת עסקה */}
                    <Dialog open={isAddDialogOpen} onClose={() => setIsAddDialogOpen(false)}>
                      <DialogTitle>הוספת עסקה חדשה</DialogTitle>
                      <DialogContent>
                        <Stack spacing={2} sx={{ mt: 2 }}>
                          <FormControl fullWidth>
                            <InputLabel>סוג עסקה</InputLabel>
                            <Select
                              value={newTransaction.type}
                              onChange={(e) => setNewTransaction({ ...newTransaction, type: e.target.value })}
                              label="סוג עסקה"
                            >
                              <MenuItem value="income">הכנסה</MenuItem>
                              <MenuItem value="expense">הוצאה</MenuItem>
                            </Select>
                          </FormControl>

                          <TextField
                            fullWidth
                            label="סכום"
                            type="number"
                            value={newTransaction.amount}
                            onChange={(e) => setNewTransaction({ ...newTransaction, amount: e.target.value })}
                            InputProps={{
                              startAdornment: <InputAdornment position="start">₪</InputAdornment>,
                            }}
                            required
                            error={!newTransaction.amount}
                            helperText={!newTransaction.amount ? 'שדה חובה' : ''}
                          />

                          <FormControl fullWidth required error={!newTransaction.category}>
                            <InputLabel>קטגוריה</InputLabel>
                            <Select
                              value={newTransaction.category}
                              onChange={(e) => setNewTransaction({ ...newTransaction, category: e.target.value })}
                              label="קטגוריה"
                            >
                              {categories && categories[newTransaction.type === 'income' ? 'income' : 'expenses']?.map((category) => (
                                <MenuItem key={category.id || category} value={category.name || category}>
                                  {category.name || category}
                                </MenuItem>
                              ))}
                            </Select>
                            {!newTransaction.category && <FormHelperText>שדה חובה</FormHelperText>}
                          </FormControl>
                          
                          <FormControl fullWidth>
                            <InputLabel>שיטת תשלום</InputLabel>
                            <Select
                              value={newTransaction.paymentMethod}
                              onChange={(e) => setNewTransaction({ ...newTransaction, paymentMethod: e.target.value })}
                              label="שיטת תשלום"
                            >
                              <MenuItem value="מזומן">מזומן</MenuItem>
                              <MenuItem value="אשראי אור יהודה">אשראי אור יהודה</MenuItem>
                              <MenuItem value="אשראי רוטשילד">אשראי רוטשילד</MenuItem>
                              <MenuItem value="העברה מזרחי">העברה מזרחי</MenuItem>
                              <MenuItem value="ביט מזרחי">ביט מזרחי</MenuItem>
                              <MenuItem value="פייבוקס מזרחי">פייבוקס מזרחי</MenuItem>
                              <MenuItem value="העברה פועלים">העברה פועלים</MenuItem>
                              <MenuItem value="ביט פועלים">ביט פועלים</MenuItem>
                              <MenuItem value="פייבוקס פועלים">פייבוקס פועלים</MenuItem>
                              <MenuItem value="אחר">אחר</MenuItem>
                            </Select>
                          </FormControl>
                          
                          {/* הוספת שדה בחירת מתחם */}
                          <FormControl fullWidth>
                            <InputLabel>מתחם</InputLabel>
                            <Select
                              value={newTransaction.complex}
                              onChange={(e) => {
                                const selectedValue = e.target.value;
                                const expectedComplex = selectedComplex === 0 ? 'rothschild' : 'extraRooms';
                                
                                // אם המשתמש בחר מתחם שונה מהטאב הנוכחי, נדפיס התרעה
                                if (selectedValue !== expectedComplex) {
                                  console.log(`שים לב: המתחם שנבחר (${selectedValue}) שונה מהטאב הנוכחי (${expectedComplex})`);
                                }
                                
                                setNewTransaction({ ...newTransaction, complex: selectedValue });
                              }}
                              label="מתחם"
                            >
                              <MenuItem value="rothschild">מתחם רוטשילד</MenuItem>
                              <MenuItem value="extraRooms">חדרים נוספים</MenuItem>
                            </Select>
                          </FormControl>

                          <TextField
                            fullWidth
                            label="תיאור"
                            value={newTransaction.description}
                            onChange={(e) => setNewTransaction({ ...newTransaction, description: e.target.value })}
                            required
                            error={!newTransaction.description}
                            helperText={!newTransaction.description ? 'שדה חובה' : ''}
                          />

                          <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={he}>
                            <DatePicker
                              label="תאריך"
                              value={newTransaction.date}
                              onChange={(date) => setNewTransaction({ ...newTransaction, date })}
                              slotProps={{ textField: { fullWidth: true } }}
                            />
                          </LocalizationProvider>

                          {newTransaction.type === 'expense' && (
                            <FormControl fullWidth>
                              <TextField
                                label="מספר תשלומים"
                                type="number"
                                value={newTransaction.installments}
                                onChange={(e) => setNewTransaction({ ...newTransaction, installments: parseInt(e.target.value) || 1 })}
                                InputProps={{
                                  inputProps: { min: 1 }
                                }}
                              />
                              <FormHelperText>למשל: הוצאת שכירות ל-12 חודשים</FormHelperText>
                            </FormControl>
                          )}
                        </Stack>
                      </DialogContent>
                      <DialogActions>
                        <Button
                          onClick={() => setIsAddDialogOpen(false)}
                          color="inherit"
                        >
                          ביטול
                        </Button>
                        <Button
                          onClick={handleAddTransaction}
                          color="primary"
                          disabled={loading || !newTransaction.amount || !newTransaction.category || !newTransaction.description}
                        >
                          {loading ? <CircularProgress size={24} /> : 'הוסף'}
                        </Button>
                      </DialogActions>
                    </Dialog>

                    {/* דיאלוג עריכת עסקה */}
                    <Dialog open={isEditDialogOpen} onClose={handleCloseEditDialog}>
                      <DialogTitle>עריכת עסקה</DialogTitle>
                      <DialogContent>
                        <Stack spacing={2} sx={{ mt: 2 }}>
                          <FormControl fullWidth>
                            <InputLabel>סוג עסקה</InputLabel>
                            <Select
                              value={editingTransaction?.type || ''}
                              onChange={(e) => setEditingTransaction({ ...editingTransaction, type: e.target.value })}
                              label="סוג עסקה"
                            >
                              <MenuItem value="income">הכנסה</MenuItem>
                              <MenuItem value="expense">הוצאה</MenuItem>
                            </Select>
                          </FormControl>

                          <TextField
                            fullWidth
                            label="סכום"
                            type="number"
                            value={editingTransaction?.amount || ''}
                            onChange={(e) => setEditingTransaction({ ...editingTransaction, amount: e.target.value })}
                            InputProps={{
                              startAdornment: <InputAdornment position="start">₪</InputAdornment>,
                            }}
                          />

                          <FormControl fullWidth>
                            <InputLabel>קטגוריה</InputLabel>
                            <Select
                              value={editingTransaction?.category || ''}
                              onChange={(e) => setEditingTransaction({ ...editingTransaction, category: e.target.value })}
                              label="קטגוריה"
                            >
                              {editingTransaction && categories && categories[editingTransaction.type === 'income' ? 'income' : 'expenses'] && 
                               categories[editingTransaction.type === 'income' ? 'income' : 'expenses'].map((category) => (
                                <MenuItem key={category.id || category} value={category.name || category}>
                                  {category.name || category}
                                </MenuItem>
                              ))}
                            </Select>
                          </FormControl>

                          <FormControl fullWidth>
                            <InputLabel>שיטת תשלום</InputLabel>
                            <Select
                              value={getPaymentMethodLabel(editingTransaction?.paymentMethod) || 'מזומן'}
                              onChange={(e) => setEditingTransaction({ ...editingTransaction, paymentMethod: e.target.value })}
                              label="שיטת תשלום"
                            >
                              <MenuItem value="מזומן">מזומן</MenuItem>
                              <MenuItem value="אשראי אור יהודה">אשראי אור יהודה</MenuItem>
                              <MenuItem value="אשראי רוטשילד">אשראי רוטשילד</MenuItem>
                              <MenuItem value="העברה מזרחי">העברה מזרחי</MenuItem>
                              <MenuItem value="ביט מזרחי">ביט מזרחי</MenuItem>
                              <MenuItem value="פייבוקס מזרחי">פייבוקס מזרחי</MenuItem>
                              <MenuItem value="העברה פועלים">העברה פועלים</MenuItem>
                              <MenuItem value="ביט פועלים">ביט פועלים</MenuItem>
                              <MenuItem value="פייבוקס פועלים">פייבוקס פועלים</MenuItem>
                              <MenuItem value="אחר">אחר</MenuItem>
                            </Select>
                          </FormControl>
                          
                          {/* הוספת שדה בחירת מתחם */}
                          <FormControl fullWidth>
                            <InputLabel>מתחם</InputLabel>
                            <Select
                              value={editingTransaction?.complex || 'rothschild'}
                              onChange={(e) => setEditingTransaction({ ...editingTransaction, complex: e.target.value })}
                              label="מתחם"
                            >
                              <MenuItem value="rothschild">מתחם רוטשילד</MenuItem>
                              <MenuItem value="extraRooms">חדרים נוספים</MenuItem>
                            </Select>
                          </FormControl>

                          <TextField
                            fullWidth
                            label="תיאור"
                            value={editingTransaction?.description || ''}
                            onChange={(e) => setEditingTransaction({ ...editingTransaction, description: e.target.value })}
                          />

                          <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={he}>
                            <DatePicker
                              label="תאריך"
                              value={editingTransaction?.date || null}
                              onChange={(date) => setEditingTransaction({ ...editingTransaction, date })}
                              slotProps={{ textField: { fullWidth: true } }}
                            />
                          </LocalizationProvider>
                        </Stack>
                      </DialogContent>
                      <DialogActions>
                        <Button
                          onClick={handleCloseEditDialog}
                          color="inherit"
                        >
                          ביטול
                        </Button>
                        <Button
                          onClick={handleSaveEdit}
                          color="primary"
                          disabled={loading}
                        >
                          {loading ? <CircularProgress size={24} /> : 'עדכן'}
                        </Button>
                      </DialogActions>
                    </Dialog>

                    {/* מנהל הקטגוריות */}
                    {isCategoryManagerOpen && (
                      <CategoryManager 
                        onClose={() => setIsCategoryManagerOpen(false)} 
                        onCategoriesUpdate={fetchCategories}
                      />
                    )}
                  </Container>
                </Grid>
              </Grid>
            </Box>
          )}

          {/* דיאלוג הגדרת יתרות פתיחה */}
          <Dialog 
            open={isInitialBalancesDialogOpen} 
            onClose={() => setIsInitialBalancesDialogOpen(false)}
            fullWidth
            maxWidth="sm"
          >
            <DialogTitle>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <AccountBalanceIcon />
                הגדרת יתרות פתיחה
              </Box>
            </DialogTitle>
            <DialogContent>
              <Alert severity="info" sx={{ mb: 3, mt: 1 }}>
                <Typography variant="body2">
                  הגדר יתרות פתיחה לכל שיטת תשלום. יתרות אלה ישמשו כבסיס לחישוב מצב ההון הכולל.
                </Typography>
              </Alert>
              
              <Typography variant="subtitle2" sx={{ mb: 2, fontWeight: 500 }}>
                שיטות תשלום:
              </Typography>
              
              <Grid container spacing={2}>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="מזומן"
                    type="number"
                    value={editingInitialBalances['מזומן'] || ''}
                    onChange={(e) => setEditingInitialBalances({
                      ...editingInitialBalances,
                      'מזומן': e.target.value
                    })}
                    InputProps={{
                      startAdornment: <InputAdornment position="start">₪</InputAdornment>,
                    }}
                  />
                </Grid>
                
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="העברה מזרחי"
                    type="number"
                    value={editingInitialBalances['העברה מזרחי'] || ''}
                    onChange={(e) => setEditingInitialBalances({
                      ...editingInitialBalances,
                      'העברה מזרחי': e.target.value
                    })}
                    InputProps={{
                      startAdornment: <InputAdornment position="start">₪</InputAdornment>,
                    }}
                  />
                </Grid>
                
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="ביט מזרחי"
                    type="number"
                    value={editingInitialBalances['ביט מזרחי'] || ''}
                    onChange={(e) => setEditingInitialBalances({
                      ...editingInitialBalances,
                      'ביט מזרחי': e.target.value
                    })}
                    InputProps={{
                      startAdornment: <InputAdornment position="start">₪</InputAdornment>,
                    }}
                  />
                </Grid>
                
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="פייבוקס מזרחי"
                    type="number"
                    value={editingInitialBalances['פייבוקס מזרחי'] || ''}
                    onChange={(e) => setEditingInitialBalances({
                      ...editingInitialBalances,
                      'פייבוקס מזרחי': e.target.value
                    })}
                    InputProps={{
                      startAdornment: <InputAdornment position="start">₪</InputAdornment>,
                    }}
                  />
                </Grid>
                
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="העברה פועלים"
                    type="number"
                    value={editingInitialBalances['העברה פועלים'] || ''}
                    onChange={(e) => setEditingInitialBalances({
                      ...editingInitialBalances,
                      'העברה פועלים': e.target.value
                    })}
                    InputProps={{
                      startAdornment: <InputAdornment position="start">₪</InputAdornment>,
                    }}
                  />
                </Grid>
                
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="ביט פועלים"
                    type="number"
                    value={editingInitialBalances['ביט פועלים'] || ''}
                    onChange={(e) => setEditingInitialBalances({
                      ...editingInitialBalances,
                      'ביט פועלים': e.target.value
                    })}
                    InputProps={{
                      startAdornment: <InputAdornment position="start">₪</InputAdornment>,
                    }}
                  />
                </Grid>
                
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="פייבוקס פועלים"
                    type="number"
                    value={editingInitialBalances['פייבוקס פועלים'] || ''}
                    onChange={(e) => setEditingInitialBalances({
                      ...editingInitialBalances,
                      'פייבוקס פועלים': e.target.value
                    })}
                    InputProps={{
                      startAdornment: <InputAdornment position="start">₪</InputAdornment>,
                    }}
                  />
                </Grid>
              </Grid>
            </DialogContent>
            <DialogActions>
              <Button 
                onClick={() => setIsInitialBalancesDialogOpen(false)} 
                color="inherit"
              >
                ביטול
              </Button>
              <Button 
                onClick={() => {
                  updateInitialBalances(editingInitialBalances);
                  setIsInitialBalancesDialogOpen(false);
                }} 
                variant="contained"
                color="primary"
              >
                שמור יתרות
              </Button>
            </DialogActions>
          </Dialog>
        </Container>
      </Box>
    </LocalizationProvider>
  );
};

export default FinancialManagementPage; 